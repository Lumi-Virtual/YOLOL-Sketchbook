//////////////////////////////////////////////////////////////////////
// Direction
// Pro
// 
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
i=:I-:X j=:Y-:J k=:Z-:K m=sqrt(i^2+j^2)
:P=atan(k/m) :H=atan(i/j)+180+(j>0)*((i<0)-0.5)*360 goto1
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//////////////////////////////////////////////////////////////////////
// Destination
// Pro
// 
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
x=:X-:DX y=:DY-:Y z=:DZ-:Z m=sqrt(x^2+y^2) :D=sqrt(x^2+y^2+z^2)
:P=atan(z/m) :H=atan(x/y)+180+(y>0)*((x<0)-0.5)*360 goto1
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|





//////////////////////////////////////////////////////////////////////
// Orientation
// Pro
// 
// PPP
//  ^
//  |
//  |
// XYZ ----- RRR
// 
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
x=:X-:XP y=:YP-:Y z=:ZP-:Z m=sqrt(x^2+y^2)
:P=atan(z/m) :H=atan(x/y)+180+(y>0)*((x<0)-0.5)*360 goto1
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
z=:ZP-:Z i=:X-:XR j=:YR-:Y k=:ZR-:Z n=sqrt(i^2+j^2-z)
:R=atan(n/k)+180+(k>0)*((n<0)-0.5)*360 goto1
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
// All together
// 
x=:X-:XP y=:YP-:Y z=:ZP-:Z i=:X-:XR j=:YR-:Y k=:ZR-:Z
m=sqrt(x^2+y^2) :P=atan(z/m) :H=3
n=sqrt(i^2+j^2-z) :R=atan(n/k)+180+(k>0)*((n<0)-0.5)*360 goto2
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|




//////////////////////////////////////////////////////////////////////
// Autopilot
// Pro
// 
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
a=100 b=180 d=360 q=0.5 r=1.5
e=((:H-:DH+b)%d)-b c=cos:R s=sin:R i=:P-:DP j=e/k e=(j>q)*(j<r)*e
e+=k k=e h=a*sin(e/2) n=i/o i=(n>q)*(n<r)*i+o p=a*sin(i/2) g=h*s+p*c
o=i f=h*c-p*s l=a*m-sqrt(f^2+g^2)*m :FP=g :FY=f :FF=l m=2.4 goto2
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|



vector -> pitch heading & last pitch heading -> FCU Forward Pitch Yaw Roll?



//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
x=:I-:X y=:Y-:J z=:Z-:K m=sqrt(x^2+y^2)
:P=atan(z/m) :H=atan(x/y)+180+(y>0)*(x<0-0.5)*360 goto1
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|


// init
pitch up -> save DP+ -> pitch down -> save DP- -> yaw right -> save DH+ -> yaw left -> save DH-

// otherwise
point towards target -> update deltas from deltas -> update deltas from movement -> goto 2

:FcuForward :FcuRotationalPitch :FcuRotationalYaw

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
goto1+:Autopilot*(1+((pa>0+pb>0+pc>0+pd>0+ha>0+hb>0+hc>0+hd>0)>7)*99)
:FcuForward=100 :FcuRotationalPitch=0 :FcuRotationalYaw=0 p=0 h=0
a=0 pa=0 pb=0 pc=0 pd=0 goto3+sqrt((:I-:X)^2+(:J-:Y)^2+(:K-:Z)^2)>30
a++ p+=:P h+=:H a=a*(a<5) ha=0 hb=0 hc=0 hd=0 goto4+a<1
:FcuRotationalPitch=100*(a<1) a++ pa+=:P*(a>5) pb+=:H*(a>5) goto5+a>9
:FcuRotationalPitch=-100*(a<1) a++ pc+=:P*(a>5) pd+=:H*(a>5) goto6+a>9
:FcuRotationalYaw=100*(a<1) a++ ha+=:P*(a>5) hb+=:H*(a>5) goto7+a>9
:FcuRotationalYaw=-100*(a<1) a++ hc+=:P*(a>5) hd+=:H*(a>5) goto8+a>9

// need to get accel And drag of p+ p- y+ y-
// one tick because very fast ships (maybe decrese sensitivity? (maybe make every axis identical?))
// several ticks because need accel
// need py+- because asymetric ships
// 

:FP=g :FY=f 

//goto3+((:I-:X)*(:I-:X)+(:J-:Y)*(:J-:Y)+(:K-:Z)*(:K-:Z))>900


:FcuRotationalPitch=-100*(o<1) o++ c=:P d=:H o=o*(o<9) goto8+o<1
j= // something with o1 and o2
(total movement > max) :FcuRotationalPitch=100*j*() goto10+()
// wait until stoped
:FcuRotationalYaw=100*(o<1) o++ e=:P f=:H o=o*(o<9) goto12+o<1
k= // something with o2 and o3
(total movement > max) :FcuRotationalPitch=100*k*() goto14+()
// wait until stoped
:FcuRotationalYaw=-100*(o<1) o++ g=:P h=:H o=o*(o<9) goto16+o<1
l= // something with o3 and o4
(total movement > max) :FcuRotationalPitch=100*l*() goto18+()
// wait until stoped



save orientation
$START pitch up one tick
wait until we stop rotating
save orientation
IF we rotate too much THEN
    change sensitivity based on how much we moved to be reasonable
END
start rotating
stop rotating when we go past some angle
wait until we stop rotating
save orientation
GOTO $START BUT FOR PITCH + - AND YAW + -

P: p+ h+ p- h-
P: a  b  c  d
Y: p+ h+ p- h-
Y: e  f  g  h

multipliers
i j k l

//--+----|----+----|----+----|----+----|----+----|----+----|----+----| // USE LEVERS AS TIMING
goto1+:Autopilot*(1+((a>0+b>0+c>0+d>0+e>0+f>0+g>0+h>0)>7)*99)
:FcuForward=100 :FcuRotationalPitch=0 :FcuRotationalYaw=0 o=0 p=12.5
m=:P n=:H goto3+sqrt((:I-:X)^2+(:J-:Y)^2+(:K-:Z)^2)>30
:FcuRotationalPitch=p*(o<1) o++ a=:P b=:H o=o*(o<51) goto4+o<1
:FcuRotationalPitch=-p*(o<1) o++ c=:P d=:H o=o*(o<51) goto5+o<1
:FcuRotationalYaw=p*(o<1) o++ e=:P f=:H o=o*(o<51) goto6+o<1
:FcuRotationalYaw=-p*(o<1) o++ g=:P h=:H o=o*(o<51) goto7+o<1
g-=e h-=f e-=c f-=d c-=a d-=b a-=m b-=n
i= j= k= l= // ijkl = total difference, maybe need xyzijk? if too small we redo with a higher base multiplier, p*=2 goto2/((i>99+j>99+k>99+l>99)>3)
i= j= k= l= // ijkl = corrected multipliers
:FcuRotationalPitch= :FcuRotationalYaw=
// get difference from ship to target
// use ab cd ef gh based on if + or - in p and h
// how many ticks to get there ? maybe setup a lever to get exact measurements










// P+ P- Y+ Y-
// scales
a b c d
// rotation pitch heading pairs
ef gh ij kl


// each axis has a scale of {10}, and a rotation of {some degrees} assuming a roll=0 config
// save orientation0
// rotate {one} step towards target
// save orientation1
// update scale and rotation from new difference, find a good number of steps for next cycle
// goto rotate

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
goto1+:Autopilot
:FcuForward=100 :FcuRotationalPitch=0 :FcuRotationalYaw=0
abc def geh ijk

x=:I-:X y=:J-:Y z=:K-:Z l=sqrt(x^2+y^2+z^2) x/=l y/=l z/=l
u=:X-:DX v=:DY-:Y w=:DZ-:Z m=sqrt(x^2+y^2+z^2) x/=m y/=m z/=m


// P+ P- Y+ Y-
abc def geh ijk















