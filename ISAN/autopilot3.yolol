//--+----|----+----|----+----|----+----|----+----|----+----|----+----|      AUTO v1 
x=0 y=0 z=0 i=5 goto 1+:AUTO
x-=:X y-=:Y z-=:Z goto 2+(i--==0)
j=10 i=5 m=:DX+x/5 n=:DY+y/5 o=:DZ+z/5
goto 4+(j--==0)
x+=:X y+=:Y z+=:Z goto 5+(i--==0)
v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v 
a=-x*z b=-y*z c=x^2+y^2            v=sqrt(a^2+b^2+c^2) a/=v b/=v c/=v
p=cos(:r) s=sin(:r) q=1-p at=(p+x*x*q)*a+(x*y*q-z*s)*b+(x*z*q+y*s)*c    
bt=(y*x*q+z*s)*a+(p+y*y*q)*b+(y*z*q-x*s)*c
ct=(z*x*q-y*s)*a+(z*y*q+x*s)*b+(p+z*z*q)*c a=at b=bt c=ct j=20
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*p-z*b)*c)*n
v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n
w+=(x*(z*a-x*c)-(y*c-z*b)*y)*o u+=((y*c-z*b)*b-a*(z*a-x*c))*o
du=u-lu dv=v-lv dw=w-lw err=180-atan(dv/dw)-(dw<0)*360 lu=u lv=v lw=w
i=10 ly=0 lp=0 :r-=(err-(ly<0)*180-(lp>0)*90+(lp<0)*90)*((lp+ly)!=0) 
goto 19-(u>-0.8)
if v>w then ly=i-2*i*(v<0) else lp=i-2*i*(w<0) end
:yaw=ly :pitch=lp goto 18+(j--==0)
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|      AUTO v1 
x=0 y=0 z=0 i=5 div=0                                                       //initialise dir [x, y, z], avg cycles (i) & divider
x-=:X y-=:Y z-=:Z div++ goto LINE+(i--==0)                                  //accumulate position (negated) i times
j=10 i=5 m=:DX+x/5 n=:DY+y/5 o=:DZ+z/5                                      //set wait (j), reset avg cycles (i), initialise (dest[RS]) [m, n, o]
goto LINE+(j--==0)                                                          //wait for j ticks
x+=:X y+=:Y z+=:Z goto LINE+(i--==0)                                        //accumulate position i times

v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v       //normalise dir, normalise dest[RS]

a=-x*z b=-y*z c=x^2+y^2                                                     //construct UP (0 roll)
c=cos(roll) s=sin(roll) m=1-c                                               //rotate up around dir by roll angle
at = (c+x*x*m)*a + (x*y*m-z*s)*b + (x*z*m+y*s)*c
bt = (y*x*m+z*s)*a + (c+y*y*m)*b + (y*z*m-x*s)*c
ct = (z*x*m-y*s)*a + (z*y*m+x*s)*b + (c+z*z*m)*c
a=at b=bt c=ct
                                                                            //calculate dest[SO] [u,v,w] (using dir [x,y,z] & up [a,b,c])
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*c-z*b)*c)*n+((y*c-z*b)*b-a*(z*a-x*c))*o
v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n+(x*(z*a-x*c)-(y*c-z*b)*y)*o

du=u-lu dv=v-lv dw=w-lw err=180-atan(dv/dw)-(dw<0)*360 lu=u lv=v lw=w       //Get angle of (last dest -> cur dest)
roll-=err-(ly<0)*180-(lp>0)*90+(lp<0)*90                                    //Compare to expected & correct roll

i=10 ly=0 lp=0                                                              //set thrust value & reset last pitch / last yaw
if v>w then ly=i-2*i*(v<0) :yaw=ly else lp=i-2*i*(w<0) :pitch=lp end        //thrust using thrust value in most needed direction, saving what was done
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|